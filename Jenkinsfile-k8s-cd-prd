pipeline {


    agent {
        node {
            label "star"
            customWorkspace "/home/jenkins/workspace/${env.JOB_NAME}_${env.BUILD_NUMBER}"
        }
    }

    options{
        skipDefaultCheckout true
        disableConcurrentBuilds()
    }

    // 构建参数
    parameters {
        string(name: 'projectName', defaultValue: 'sllb', description: 'project name')
        string(name: 'originImage', defaultValue: '', description: 'test env image name,need to be taged to prd image name')
        string(name: 'tag', defaultValue: '', description: 'image tag')
        string(name: 'imageFileName', defaultValue: 'xxx.tar', description: 'image tar name')
        string(name: 'chartFileName', defaultValue: 'xxx.tar', description: 'image tar name')
        string(name: 'ftpCredential', defaultValue: 'xyk-prd-ftp-credential', description: 'ftp credential')
        string(name: 'ftpPath', defaultValue: '', description: 'a ftp relative path')
        string(name: 'ftpAddr', defaultValue: '10.1.89.31', description: 'ftp ip address')
        string(name: 'HARBOR_URL', defaultValue: 'harbor.devops.qdb.com', description: 'harbor url')
        string(name: 'HARBOR_PROJECT', defaultValue: 'star', description: 'harbor project name')
        choice(choices: ['false', 'true'], description: '是否指定机器部署', name: 'SPECIFY_NODE')
        string(name: 'DESTINATION_KEY', defaultValue: "qdccb\\.cn/role", description: '要部署的目标机器')
        string(name: 'DESTINATION_VALUE', defaultValue: 'star', description: '要部署的目标机器')
        string(name: 'HELM_NS', defaultValue: 'star', description: 'k8s namespace')
        string(name: 'ingress', defaultValue: 'nginx', description: 'ingress class name')
        string(name: 'replicas', defaultValue: '2', description: 'replica count')
    }
    stages {

        stage('Helm Deploy Application') {
            steps {
                script {
                    echo "get imagefile from ftp……"
                    withCredentials([usernamePassword(credentialsId: env.ftpCredential, usernameVariable: 'SFTP_USER', passwordVariable: 'SFTP_PASSWORD')]) {
                        def imageDownloadCommand = """
                            sshpass -p '${SFTP_PASSWORD}' sftp -o StrictHostKeyChecking=no ${SFTP_USER}@${env.ftpAddr} << EOF
                            cd ${env.ftpPath}
                            get ${env.imageFileName}
                            bye
                            EOF
                        """
                        def imageDownloadStatus = sh(script: imageDownloadCommand, returnStatus: true)

                        if (imageDownloadStatus != 0) {
                            error "Failed to download image file from SFTP server"
                        }
                        echo "get imagefile from ftp…… done"
                        
                        echo "get chart file from ftp……"
                        def chartDownloadCommand = """       
                            sshpass -p '${SFTP_PASSWORD}' sftp -o StrictHostKeyChecking=no ${SFTP_USER}@${env.ftpAddr} << EOF
                            cd ${env.ftpPath}
                            get ${env.chartFileName}
                            bye
                            EOF
                        """
                        def chartDownloadStatus = sh(script: chartDownloadCommand, returnStatus: true)

                        if (chartDownloadStatus != 0) {
                            error "Failed to download chart file from SFTP server"
                        }
                        echo "get chart file from ftp…… done"
                    }

                    sh """
                        export DOCKER_CONFIG="/kaniko/.docker/"
                        nerdctl load -i ${env.imageFileName}
                        nerdctl tag ${env.originImage} ${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName}:${tag} 
                        nerdctl --insecure-registry=true push \
                            ${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName}:${tag} 

                        tar -zxf ${env.chartFileName} -C .
                    """

                    def node_selected = env.SPECIFY_NODE
                    if(node_selected == 'true') {
                        sh """
                            helm upgrade --install ${env.projectName} \
                            deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                            -f deploy/charts/values.yaml --set nodeSelector."${env.DESTINATION_KEY}"="${env.DESTINATION_VALUE}" \
                            --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                            --set image.tag=${tag} \
                            --set ingress.className=${env.ingress} \
                            --set replicaCount=${env.replicas} 
                        """
                    } else {
                        sh """
                            helm upgrade --install ${env.projectName} \
                            deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                            -f deploy/charts/values.yaml \
                            --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                            --set image.tag=${tag} \
                            --set ingress.className=${env.ingress} \
                            --set replicaCount=${env.replicas} 
                        """
                    }
                    
                    sh """
                        helm get manifest --namespace ${env.HELM_NS} ${env.projectName}
                    """
                }
            }
        }

    }

    post {
        always {
            script {
                // 清理特定工作目录
                cleanWs()
            }
        }
    }

}
