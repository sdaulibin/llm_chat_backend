@Library("bqdlib") _

//import
def getcode = new org.devops.GetCode()
def builds = new org.devops.Builds()
def mysonar = new org.devops.Sonar()
def mynexus = new org.devops.Nexus()
def gitlab = new org.devops.Gitlab()
def sat = new org.devops.Sat()
def qax = new org.devops.QaxCodeScan()
def helm = new org.devops.Helmcd()
def jj = new org.devops.Jenkins()
def cc = new org.devops.Creditcard()


pipeline {


    agent {
        node {
            label "star"
            customWorkspace "/home/jenkins/workspace/${env.JOB_NAME}_${env.BUILD_NUMBER}"
        }
    }

    options{
        skipDefaultCheckout true
        disableConcurrentBuilds()
    }

    // 构建参数
    parameters {
        choice(choices: ['uat','production'], description: '部署uat或者是打出生产包', name: 'purpose')
        string(name: 'srcUrl', defaultValue: 'http://gitlab.qdccb.cn/star/star_llm_backend.git', description: 'Git repository URL')
        string(name: 'projectName', defaultValue: 'sllb', description: 'project name')
        string(name: 'groupName', defaultValue: 'star', description: 'Git group name, Need full path include sub group')
        string(name: 'scmUrl', defaultValue: 'gitlab.qdb.com', description: 'Git URL')
        string(name: 'gitlabTokenByUserPassword', defaultValue: '', description: 'gitlab credential by lvchentao username and password')
        string(name: 'HARBOR_URL', defaultValue: 'harbor.devops.qdb.com', description: 'harbor url')
        string(name: 'HARBOR_PROJECT', defaultValue: 'star', description: 'harbor project name')
        choice(choices: ['false', 'true'], description: '是否指定机器部署', name: 'SPECIFY_NODE')
        string(name: 'DESTINATION_KEY', defaultValue: 'qdccb.cn/role', description: '要部署的目标机器')
        string(name: 'DESTINATION_VALUE', defaultValue: 'star', description: '要部署的目标机器')
        string(name: 'HELM_NS', defaultValue: 'star-uat', description: 'k8s namespace')
        string(name: 'ftpCredential', defaultValue: 'devops-test-ftp-credential', description: 'ftp credential')
        string(name: 'ftpPath', defaultValue: '', description: 'a ftp relative path')
        string(name: 'ftpAddr', defaultValue: '10.1.89.31', description: 'ftp ip address')
        string(name: 'ingress', defaultValue: 'nginx', description: 'ingress class name')
        string(name: 'ingressHost', defaultValue: 'sllb-uat.devops.qdb.com', description: 'ingress host')
    }
   environment {
        selectedBranch = ''  // 定义为全局变量
    }
    stages {

        stage("Init"){
            steps{
                script{
                    builds.InitSteps()
                }
            }
        }

        stage('Get Release Branches') {
            steps {
                script {

                    // 获取所有以'release'开头的分支
                    getcode.GetCode("master", "${params.srcUrl}", env.gitlabTokenByUserPassword)
                    def releaseBranches = gitlab.GetBranchesByPrefix("release")

                    // 将获取到的分支列表展示给用户进行选择
                    selectedBranch = input(
                        id: 'branchSelection',
                        message: '请选择一个Release分支进行构建',
                        parameters: [choice(name: 'BRANCH_NAME', choices: releaseBranches.join('\n'), description: '选择要构建的Release分支')]
                    )

                    echo "用户选择的分支是: ${selectedBranch}"
                    getcode.GetCode("${selectedBranch}", "${params.srcUrl}", env.gitlabTokenByUserPassword)
                }
            }
        }

        stage("Get Gitlab Info") {
            steps {
                script {
                    gitlab.GetBranchCommitID("${selectedBranch}")
                    echo sh(script: 'env', returnStdout: true)
                }
            }
        }

        stage('Archive') {
            steps {
                script {
                    if (env.purpose == "production") {
                        sh """
                            tar -czf ${env.projectName}-${selectedBranch}-chart.tar.gz deploy/charts/
                        """
                        withCredentials([usernamePassword(credentialsId: env.ftpCredential, usernameVariable: 'SMB_USER', passwordVariable: 'SMB_PASSWORD')]) {
                            def uploadCommand = "smbclient -U ${SMB_USER}%${SMB_PASSWORD} //${env.ftpAddr}/ftp -c \"cd ${env.ftpPath}; put ${env.projectName}-${selectedBranch}-chart.tar.gz\""
                            def uploadStatus = sh(script: uploadCommand, returnStatus: true)
                    
                            if (uploadStatus != 0) {
                                error "Failed to upload helm file to FTP server"
                            }
                        }
                    }
                }
            }
        }


        stage('Build Docker Image with nerdctl') {
            steps {
                script {
                    sh """
                    export DOCKER_CONFIG="/kaniko/.docker/"
                    export RELEASE_REGISTRY=${env.HARBOR_URL}/${env.HARBOR_PROJECT}
                    export RELEASE_VERSION=${env.GITLAB_COMMIT_ID}
                    export RELEASE_IMAGE=${RELEASE_REGISTRY}/${env.projectName}:${RELEASE_VERSION}
                    make -e   release-image.amd64
                    nerdctl --insecure-registry=true save -o ${env.projectName}-${RELEASE_VERSION}.tar ${RELEASE_IMAGE}-amd64 
                    nerdctl --insecure-registry=true push ${RELEASE_IMAGE}-amd64
                    """
                }
            }
        }


        stage('Upload Image tar') {
            steps {
                script {
                    if (env.purpose == "production") { 
                        helm.DeployToSmb("${env.ftpPath}", "${env.projectName}-${RELEASE_VERSION}.tar", "${env.ftpCredential}", "${env.ftpAddr}")
                    }
                }
            }
        }

        stage('Helm Deploy Application') {
            steps {
                script {
                    if (env.purpose == "uat") {
                        def node_selected = env.SPECIFY_NODE
                        if(node_selected == 'true') {
                            sh """
                               export DOCKER_CONFIG="/kaniko/.docker/"
                               helm upgrade --install ${env.projectName} \
                               deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                               -f deploy/charts/values.yaml --set "nodeSelector.${env.DESTINATION_KEY}=${env.DESTINATION_VALUE}" \
                               --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                               --set ingress.className=${env.ingress} \
                               --set ingress.hosts[0].host=${env.ingressHost} \
                               --set image.tag=${env.GITLAB_COMMIT_ID}-amd64 
                            """
                        } else {
                            sh """
                               helm upgrade --install ${env.projectName} \
                               deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                               -f deploy/charts/values.yaml \
                               --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                               --set image.tag=${env.GITLAB_COMMIT_ID}-amd64 \
                               --set ingress.hosts[0].host=${env.ingressHost} \
                               --set ingress.className=${env.ingress} 
                            """
                        }
                        sh """
                            helm get manifest --namespace ${env.HELM_NS} ${env.projectName}
                        """
                    }
                }
            }
        }

    }

    post {
        always {
            script {
                // 清理特定工作目录
                cleanWs()
            }
        }
    }

}
